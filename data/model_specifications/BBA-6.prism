mdp

const minVm;
const i_vm;
const maxVm;				//maximum number of VMs	
const double maxLat;

formula lat = load/s;			//current latency 
formula oneLessLat = load/(s-1);	//latency when number of VM is one lesser than current VM

module load_generator
	load:[100..1000] init 100;
	[]true-> (load'=100);
	[]true-> (load'=200);
	[]true -> (load'=300);
	[]true -> (load'=400);
	[]true-> (load'=500);
	[]true -> (load'=600);
	[]true-> (load'=700);
	[]true -> (load'=800);
	[]true-> (load'=900);
	[]true-> (load'=1000);
	[]true-> (load'=100);
endmodule

module scaler 

	//state(s) : current number of VMs
	s:[minVm..maxVm] init i_vm;
	//action(act) : 0-add VM, 1-remove VM, 2-do nothing, 3 start
	act:[0..3] init 3;
	
	//The scaler would only allows adding and removing VMs if it is just the start of the scaling decision
	//process, where act=3, or the value of act is equal to their action.
	//For example, the scaler can add if act=0 or act=3, but cannot add if act=1 or act=2.

	//Minimum VM
	[add] s=minVm & act!=1   & lat>=maxLat -> 1/3:(s'=s+1)&(act'=0) + 1/3:(s'=s+2)&(act'=0) + 1/3:(s'=s+3)&(act'=0);
	[no_op] s=minVm -> (s'=s)&(act'=2);
	
	//minVM+1
	[add] s=minVm+1 & act!=1  & lat>=maxLat   -> 1/3:(s'=s+1)&(act'=0) + 1/3:(s'=s+2)&(act'=0) + 1/3:(s'=s+3)&(act'=0);
	[rem] s=minVm+1 & act!=0 & lat<maxLat-> (s'=s-1)&(act'=1);
	[no_op] s=minVm+1 -> (s'=s)&(act'=2);

	// maxVM-2>s<minVm+1
	[add] s>minVm+1 & s<maxVm-2 & act!=1  & lat>=maxLat  -> 1/3:(s'=s+1)&(act'=0) + 1/3:(s'=s+2)&(act'=0) + 1/3:(s'=s+3)&(act'=0);
	[rem] s>minVm+1 & s<maxVm-2 & act!=0 & lat<maxLat-> 1/2:(s'=s-1)&(act'=1) + 1/2:(s'=s-2)&(act'=1);
	[no_op] s>minVm+1 & s<maxVm-2 -> (s'=s)&(act'=2);

	//maxVM-2
	[add] s=maxVm-2 & act!=1   & lat>=maxLat  -> 1/2:(s'=s+1)&(act'=0) + 1/2:(s'=s+2)&(act'=0);
	[rem] s=maxVm-2 & act!=0 & lat<maxLat-> 1/2:(s'=s-1)&(act'=1) + 1/2:(s'=s-2)&(act'=1);
	[no_op] s=maxVm-2 -> (s'=s)&(act'=2);

	//maxVM-1
	[add] s=maxVm-1 & act!=1   & lat>=maxLat  -> (s'=s+1)&(act'=0);
	[rem] s=maxVm-1 & act!=0 & lat<maxLat-> 1/2:(s'=s-1)&(act'=1) + 1/2:(s'=s-2)&(act'=1);
	[no_op] s=maxVm-1 -> (s'=s)&(act'=2);

	//maxVM
	[rem] s=maxVm & act!=0 & lat<maxLat-> 1/2:(s'=s-1)&(act'=1) + 1/2:(s'=s-2)&(act'=1);
	[no_op] s=maxVm -> (s'=maxVm)&(act'=2);

endmodule

label "stop" = (act=2);

rewards "lat_violation_underProvision"
	[add]lat<maxLat : 0;
	[add]lat>=maxLat : 1;
	[rem]lat<maxLat : 0;
	[rem]lat>=maxLat : 1;
	[no_op]lat<maxLat : 0;
	[no_op]lat>=maxLat : 1;
endrewards

rewards "lat_violation_overProvision"
	[add]oneLessLat<maxLat : 0;
	[add]oneLessLat>=maxLat : 1;
	[rem]oneLessLat<maxLat : 0;
	[rem]oneLessLat>=maxLat : 1;
	[no_op]oneLessLat<maxLat : 0;
	[no_op]oneLessLat>=maxLat : 1;
endrewards

rewards "cum_reward"
	[add]lat<=maxLat : 1+1/s;
	[add]lat>maxLat: 0;
	[rem]lat<=maxLat : 1+1/s;
	[rem]lat>maxLat: 0;
	[no_op]lat<=maxLat : 1+1/s;
	[no_op]lat>maxLat: 0;
endrewards